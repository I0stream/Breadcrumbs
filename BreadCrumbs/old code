/*protocol NewOthersCrumbsViewControllerDelegate: class {
func updateVoteSpecific(NewVoteValue: Int, crumbUUID: String, hasVotedValue: Int)
}*/

/*import UIKit
import MapKit

class ViewCrumbViewController: UIViewController, UITextViewDelegate, MKMapViewDelegate {



//MARK: Properties

@IBOutlet weak var crumbMessageTextView: UITextView!
@IBOutlet weak var crumbPosterLabel: UILabel!
@IBOutlet weak var locationLabel: UILabel!
@IBOutlet weak var timeLeftForCrumbLabel: UILabel!
@IBOutlet weak var voteValueLabel: UILabel!
@IBOutlet weak var mapViewOutlet: MKMapView!
@IBOutlet weak var countdownLabel: UILabel!

//MARK: Variables

let helperFunctions = Helper()//for updateVoteValue
var viewbreadcrumb: CrumbMessage?
var timer = NSTimer()


override func viewDidLoad() {
super.viewDidLoad()
//init


self.crumbMessageTextView.delegate = self
self.mapViewOutlet.delegate = self
self.mapViewOutlet.mapType = MKMapType.Standard

if viewbreadcrumb!.calculate() > 0 {
let countdownHolder = viewbreadcrumb!.countdownTimerSpecific()

converterUpdater(countdownHolder)

timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: #selector(ViewCrumbViewController().countingDown), userInfo: nil, repeats: true)
} else {
countdownLabel.text = "Time's up!"
}
//init

//TextView border
crumbMessageTextView.layer.borderColor = UIColor(red: 0.9, green: 0.9, blue: 0.9, alpha: 1.0).CGColor
self.crumbMessageTextView.layer.borderWidth = 1.0;
self.crumbMessageTextView.layer.cornerRadius = 5.0;

//reset text justification to default
self.automaticallyAdjustsScrollViewInsets = false

//set up views for existing crumbs
crumbMessageTextView.text = viewbreadcrumb?.text
crumbPosterLabel.text = (viewbreadcrumb?.senderName)! + " "
timeLeftForCrumbLabel.text = "\(viewbreadcrumb!.dateOrganizer())"
voteValueLabel.text = "\(String(viewbreadcrumb!.votes!))"

if viewbreadcrumb!.calculate() > 0 {

} else {
countdownLabel.text = "Time's up!"
}

/*if viewbreadcrumb?.addressStr != nil {
locationLabel.text = viewbreadcrumb?.addressStr
}else{
locationLabel.text = "Address error"
}*/

//fix font size
crumbMessageTextView.font = UIFont.systemFontOfSize(17)

//autodefine textview size
let fixedWidth = crumbMessageTextView.frame.size.width
crumbMessageTextView.sizeThatFits(CGSize(width: fixedWidth, height: CGFloat.max))
let newSize = crumbMessageTextView.sizeThatFits(CGSize(width: fixedWidth, height: CGFloat.max))
var newFrame = crumbMessageTextView.frame
newFrame.size = CGSize(width: max(newSize.width, fixedWidth), height: newSize.height)
crumbMessageTextView.frame = newFrame;

//anotations
let mkAnnoTest = MKPointAnnotation.init()
mkAnnoTest.coordinate = viewbreadcrumb!.location.coordinate
mapViewOutlet.addAnnotation(mkAnnoTest)

mapViewOutlet.camera.centerCoordinate = viewbreadcrumb!.location.coordinate

mapViewOutlet.camera.altitude = 1000

}


override func didReceiveMemoryWarning() {
super.didReceiveMemoryWarning()
// Dispose of any resources that can be recreated.
}

func countingDown(){
if viewbreadcrumb!.calculate() > 0 {
var countdownHolder = viewbreadcrumb!.countdownTimerSpecific()
countdownHolder = countdownHolder - 1

converterUpdater(countdownHolder)
} else {
timer.invalidate()
countdownLabel.text = "Time's up!"
}
}
func converterUpdater(countdownHolder: Int){
//var days = String(countdownHolder / 86400)
var hours = String(countdownHolder / 3600)
var minutes = String((countdownHolder % 3600) / 60)
var seconds = String(countdownHolder % 60)


if Int(hours) < 10{
hours = "0\(hours)"
}
if Int(minutes) < 10{
minutes = "0\(minutes)"
}
if Int(seconds) < 10{
seconds = "0\(seconds)"
}

countdownLabel.text = "\(hours):\(minutes):\(seconds) left"
}

}*/
/*
// MARK: - Core Data stack?

lazy var persistentContainer: NSPersistentContainer = {

var container = NSPersistentContainer(name: "MessageDataModel")
container.loadPersistentStores(completionHandler: { (storeDescription, error) in
if let error = error as NSError? {

fatalError("Unresolved error \(error)")
}
})
return container
}()


//for older versions probably
lazy var managedObjectContext: NSManagedObjectContext = {
// Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.
let coordinator = self.persistentStoreCoordinator
var managedObjectContext = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)
managedObjectContext.persistentStoreCoordinator = coordinator
return managedObjectContext
}()
lazy var applicationDocumentsDirectory: URL = {
let urls = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
return urls[urls.count-1]
}()
lazy var managedObjectModel: NSManagedObjectModel = {
let modelURL = Bundle.main.url(forResource: "MessageDataModel", withExtension: "momd")!
return NSManagedObjectModel(contentsOf: modelURL)!
}()
lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {
let coordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)
let url = self.applicationDocumentsDirectory.appendingPathComponent("BreadCrumbs.sqlite")
var failureReason = "There was an error creating or loading the application's saved data."
do {
try coordinator.addPersistentStore(ofType: NSSQLiteStoreType, configurationName: nil, at: url, options: nil)
} catch {
// Report any error we got.
var dict = [String: AnyObject]()
dict[NSLocalizedDescriptionKey] = "Failed to initialize the application's saved data" as AnyObject?
dict[NSLocalizedFailureReasonErrorKey] = failureReason as AnyObject?

dict[NSUnderlyingErrorKey] = error as NSError
let wrappedError = NSError(domain: "YOUR_ERROR_DOMAIN", code: 9999, userInfo: dict)
// Replace this with code to handle the error appropriately.
// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
NSLog("Unresolved error \(wrappedError), \(wrappedError.userInfo)")
abort()
}

return coordinator
}()


func getContext() -> NSManagedObjectContext{
if #available(iOS 10.0, *) {
let context = self.persistentContainer.viewContext
return context
} else {
let context = self.managedObjectContext
return context
}
}

//Core Data Saving support
func saveContext () {//getContext()
if persistentContainer.viewContext.hasChanges {
do {
try persistentContainer.viewContext.save()
} catch {

let nserror = error as NSError
NSLog("Unresolved error \(nserror), \(nserror.userInfo)")
abort()
}
}
}*/

/*func updateIsViewedValue(_ crumb: CrumbMessage){
//updates coredata value of viewed others, needs a reload function to complete its function

let predicate = NSPredicate(format: "recorduuid == %@", crumb.uRecordID!)

let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "Message")
fetchRequest.predicate = predicate

do {// change it, it not work y?
let fetchedMsgs = try helperFunctions.moc.fetch(fetchRequest) as! [Message]

let one:Int = 1
fetchedMsgs.first?.setValue(one, forKey: "viewedOther")//is seen


do {// save it!
try helperFunctions.moc.save()//it is not saving
} catch {
print(error)
}
} catch {
print(error)
}
}*/

/*func doesArrContainUnique(_ CDArr: [CrumbMessage], LoadedArr: [CrumbMessage], prevDropped: [CrumbMessage])-> [CrumbMessage]{
let bothLoadedAndDropped = LoadedArr + dropped

var uniqueArr = [CrumbMessage]()
var testArr = [CrumbMessage]()

if bothLoadedAndDropped.count < CDArr.count{//
for cdcrumbs in CDArr{

for ldcrumbs in bothLoadedAndDropped{

if ldcrumbs.uRecordID == cdcrumbs.uRecordID {//if crumb is in tableview remove from list
testArr.removeAll()
break

}
testArr += [cdcrumbs]

}
if testArr.count == bothLoadedAndDropped.count{//if a value is not found store it
uniqueArr += [testArr[0]]
break
}
}

}

let totalAmount = bothLoadedAndDropped + uniqueArr

if totalAmount.count < CDArr.count{
uniqueArr += doesArrContainUnique(CDArr, LoadedArr: totalAmount, prevDropped: dropped)
}

//return(actualAmount)
return (uniqueArr)

}*/
//limit crumbs in view to 15, the brains of the operation
/* func islimited(_ uniques: [CrumbMessage], loaded: [CrumbMessage])-> ([CrumbMessage],[CrumbMessage]){
var total = loaded + uniques
//var final = [CrumbMessage]()
//var dropped = [CrumbMessage]()

if total.count > 15{
let remove = total.count - 15
final = [CrumbMessage](total.dropFirst(remove))
dropped = [CrumbMessage](total[0...(remove-1)])
}

return (final,dropped)
}


//limit crumbs in view to 15
func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
let lastLoadedElement = crumbmessages.count - 1
if indexPath.row == lastLoadedElement {

if dropped.count >= 15{
let fifteenMore = dropped[0...14]
dropped = [CrumbMessage](dropped.dropFirst(15))

self.crumbmessages += fifteenMore.reversed()
}else if dropped.count < 15 && dropped.count > 0 {
self.crumbmessages += dropped[0...(dropped.count - 1)]

dropped = [CrumbMessage]()
}//if zero do nothing

}
}*/

